# Define a function named is_two. It should accept one input and return# True if the passed input is either the number or the string 2, False otherwise.def is_two(input_value):    if type(input_value) == int or type(input_value) == str:        return True    else:        return False#print(is_two([1, 2, 3]))#print(is_two(1))#print(is_two("abc"))# Define a function named is_vowel. It should return True if the passed string# is a vowel, False otherwise.def is_vowel(input_value):    if input_value in ("a", "e", "i", "o", "u"):        return True    else:        return False# print(is_vowel("a"))# print(is_vowel("i"))# Define a function named is_consonant. It should return True if the passed# string is a consonant, False otherwise. Use your is_vowel function to# accomplish this.def is_consonant(input_value):    if is_vowel(input_value)==True:        return False    else:        return True# print(is_consonant("a"))# print(is_consonant("b"))# print(is_consonant("c"))# print(is_consonant("d"))  # print(is_consonant("e"))# print(is_consonant("f"))         # Define a function that accepts a string that is a word. The function should# capitalize the first letter of the word if the word starts with a consonant.def cap_1st_letter_if_consonant(input_value):    if is_consonant(input_value[0]) == True:        return input_value.capitalize()    else:        return input_value# print(cap_1st_letter_if_consonant("bbcd"))# Define a function named calculate_tip. It should accept a tip percentage# (a number between 0 and 1) and the bill total, and return the amount to tip.def calculate_tip(tip_percentage, bill_total):    tip_percentage = (tip_percentage / 100) + 1    return bill_total * tip_percentage# print(calculate_tip(10, 100))# print(calculate_tip(10, 200))# print(calculate_tip(10, 300))# print(calculate_tip(10, 15))# Define a function named apply_discount. It should accept a original price,# and a discount percentage, and return the price after the discount is# applied.def apply_discount(discount_percentage, original_price):    discount_percentage = 1 - (discount_percentage/100)    return original_price * discount_percentage    # print(apply_discount(10, 100))# Define a function named handle_commas. It should accept a string that is a# number that contains commas in it as input, and return a number as output.def handle_commas(input_value):    placeholder = []    value_with_no_commas = ""    if "," in input_value:        placeholder = input_value.split(",")        for place in placeholder:             value_with_no_commas = ''.join(placeholder)        return value_with_no_commas    # print(handle_commas("1,000"))# Define a function named get_letter_grade. It should accept a number and# return the letter grade associated with that number (A-F).def get_letter_grade(grade):    if grade in range(99,101):        return "A+"    elif grade in range(93,99):        return "A"    elif grade in range(90,93):        return "A-"    elif grade in range(88,90):        return "B+"    elif grade in range (83, 88):        return "B"    elif grade in range(80,83):        return "B-"    elif grade in range(78,80):        return "C+"    elif grade in range (73, 78):        return "C"    elif grade in range(70,73):        return "C-"    elif grade in range(68,70):        return "D+"    elif grade in range (63, 68):        return "D"    elif grade in range(60,63):        return "D-"    elif grade in range(58,60):        return "F+"    elif grade in range (50, 58):        return "F"    elif grade in range(0,50):        return "F-"    else:        print("Please enter a valid numerical grade ranging from 0-100")# print(get_letter_grade(100))# print(get_letter_grade(88))# print(get_letter_grade(65))# print(get_letter_grade(92))# print(get_letter_grade(42))# Define a function named remove_vowels that accepts a string and returns a# string with all the vowels removed.def remove_vowels(input_value):    placeholder = []    removed_vowels_from_input = ""    for value in input_value:        if is_vowel(value)!=True:            placeholder.append(value)    removed_vowels_from_input = "".join(placeholder)    return removed_vowels_from_input            # print(remove_vowels("hello"))# print(remove_vowels("abcdefghijklmnopqrstuvwxyz"))# Define a function named normalize_name. It should accept a string and# return a valid python identifier, that is:def leading_spaces(input_value):        cleaned_string = ""    for index, value in enumerate(input_value):        if value != " ":            for i in range(index, len(input_value)):                cleaned_string += input_value[i]            break            return cleaned_stringdef reversed_string(input_value):    reversed_string = ""    for value in reversed(input_value):        reversed_string += value    return reversed_stringdef trailing_spaces(input_value):    flipped_string = ""    cleaned_string = ""        flipped_string = reversed_string(input_value)    flipped_string = leading_spaces(flipped_string)        cleaned_string = reversed_string(flipped_string)    return cleaned_stringdef number_as_start(input_value):    cleaned_string = ""    for index, value in enumerate(input_value):        if value not in "123456790":            for i in range(index, len(input_value)):                cleaned_string += input_value[i]            break                            return cleaned_stringdef replace_spaces_with_underscore(input_value):    cleaned_string = ""    for value in input_value:        if value == " ":            cleaned_string += "_"        else:            cleaned_string += value                return cleaned_stringdef special_symbos(input_value):    cleaned_string = ""    for value in input_value:        if value not in "~!@#$%^&*()+=-,.<>/?\|~;:[]{}":            cleaned_string += value    return cleaned_stringdef string_to_lower_case(input_value):    return input_value.lower()def normalize_name(input_value):    while input_value[0] in "0123456789 " or input_value[len(input_value)-1] in "0123456789 ":        input_value = leading_spaces(input_value)        input_value = trailing_spaces(input_value)        input_value = number_as_start(input_value)        input_value = special_symbos(input_value)            input_value = replace_spaces_with_underscore(input_value)    input_value = string_to_lower_case(input_value)    return input_valuetest_code = "1 2 3 $()&^$( T#%^H#%^i%^s%^ i%^&S %&(*(a v$%&AlI#%^d p#%^YTh#%^on id#%^%&en$%&TI#$^%%$&^*Fi@$%^*(er  #^#^#@"#print(normalize_name(test_code))# Write a function named cumulative_sum that accepts a list of numbers and# returns a list that is the cumulative sum of the numbers in the list.# cumulative_sum([1, 1, 1]) returns [1, 2, 3]# cumulative_sum([1, 2, 3, 4]) returns [1, 3, 6, 10]def cumulative_sum(input_value):    cumulative_list = []    for index, value in enumerate(input_value):        if index == 0:            cumulative_list.append(value)        else:            cumulative_list.append(int(value) + int(cumulative_list[index-1]))    return cumulative_list       #print(cumulative_sum([1,2,3,3,3,3,3]))# Additional Exercise# Once you've completed the above exercises, follow the directions from https://gist.github.com/zgulde/ec8ed80ad8216905cda83d5645c60886 in order to thouroughly comment your code to explain your code.# Bonus# Create a function named twelveto24. It should accept a string in the format# 10:45am or 4:30pm and return a string that is the representation of the time# in a 24-hour format.def twelveto24(input_value):    time = ""    am_pm = ""    for value in input_value:        if value not in "0123456789:":            am_pm += value    for value in input_value:            if value in "0123456789":                time +=value    if am_pm == 'am':        time_value = int(time)        if time_value in range(1200, 1260):            time_value = time_value - 1200            if len(str(time_value)) == 2:                return "00" + str(time_value) + " hours"            elif len(str(time_value)) == 1:                return "000" + str(time_value) + " hours"        else:            if(len(time) == 3):                return "0"+time + " hours"            else:                return time + " hours"                            elif am_pm == "pm":        time_value = int(time)        time_value = time_value + 1200        return str(time_value) + " hours"    # print(f"12:01am {twelveto24('12:01am')}")# print(f"12:35am {twelveto24('12:35am')}")# print(f"11:10am {twelveto24('11:10am')}")# print(f"10:05am {twelveto24('10:05am')}")# print(f"9:01am {twelveto24('9:01am')}")# print(f"09:59am {twelveto24('09:59am')}")# print(f"8:55am {twelveto24('8:55am')}")# print(f"08:13am {twelveto24('08:13am')}")# print(f"07:22am {twelveto24('07:22am')}")# print(f"7:15am {twelveto24('7:15am')}")# print(f"06:45am {twelveto24('06:45am')}")# print(f"6:30am {twelveto24('6:30am')}")# print(f"12:59am {twelveto24('12:59am')}\n")# print(f"1:01pm {twelveto24('1:01pm')}")# print(f"10:35pm {twelveto24('10:35pm')}")# print(f"12:10pm {twelveto24('12:10pm')}")# print(f"10:05am {twelveto24('10:05pm')}")# print(f"9:01pm {twelveto24('9:01pm')}")# print(f"09:59pm {twelveto24('09:59pm')}")# print(f"8:55pm {twelveto24('8:55pm')}")# print(f"08:13pm {twelveto24('08:13pm')}")# print(f"07:22pm {twelveto24('07:22pm')}")# print(f"7:15pm {twelveto24('7:15pm')}")# print(f"06:45pm {twelveto24('06:45pm')}")# print(f"6:30pm {twelveto24('6:30pm')}")# print(f"12:59pm {twelveto24('12:59pm')}\n")#Bonus write a function that does the opposite.# Create a function named col_index. It should accept a spreadsheet column name, and return the index number of the column.# col_index('A') returns 1# col_index('B') returns 2# col_index('AA') returns 27